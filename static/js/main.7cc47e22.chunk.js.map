{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Contacto.js","components/Contactos.js","components/ContactoSeleccionado.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","placeholder","Formulario","agregarContacto","useState","nombres","apellidos","fechaNac","direccion","telCasa","telCelular","observaciones","funcion","contacto","setContacto","error","setError","handleChange","e","contactoAntiguo","target","name","value","onSubmit","preventDefault","trim","copiaContacto","uuidv4","role","htmlFor","onChange","cols","rows","Contacto","setContactoSelect","onClick","src","alt","Contactos","contactos","map","c","ContactoSeleccionado","contactoSelect","nombre","App","contactosLS","JSON","parse","localStorage","getItem","setContactos","objContacto","contactosAntiguos","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7cc47e22.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            .<nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"!#\">Navbar</a>\r\n                <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n                <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                        <li className=\"nav-item active\">\r\n                            <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"!#\">Link</a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"!#\" id=\"dropdownId\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownId\">\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 1</a>\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 2</a>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\r\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, Fragment } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nconst Formulario = ({ agregarContacto }) => {\r\n\r\n    const [contacto, setContacto] = useState({\r\n        nombres: '',\r\n        apellidos: '',\r\n        fechaNac: '',\r\n        direccion: '',\r\n        telCasa: '',\r\n        telCelular: '',\r\n        observaciones: '',\r\n        funcion: () => { }\r\n    });\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    //funcion q modifica el state de acuerdo a los inputs del formulario\r\n    let handleChange = (e) => {\r\n        let contactoAntiguo = { ...contacto };\r\n        contactoAntiguo[e.target.name] = e.target.value;\r\n        setContacto(contactoAntiguo);\r\n    }\r\n    const enviarFormulario = (e) => {\r\n        //prevenir q la pagina se regargue\r\n        e.preventDefault();\r\n        //validar q todos los campos esten llenos\r\n        let { nombres, apellidos, fechaNac, direccion, telCasa, telCelular, observaciones } = contacto;\r\n        if (nombres.trim() === \"\" || apellidos.trim() === \"\" ||\r\n            fechaNac.trim() === \"\" || telCelular.trim() === \"\" ||\r\n            direccion.trim() === \"\" || observaciones.trim() === \"\" ||\r\n            telCelular.trim() === \"\" || telCasa.trim() === \"\") {\r\n            // hay un error y todos los campos deberian ser llenados\r\n            setError(true);\r\n            return;\r\n        } else {\r\n            // crear el contacto en la agenda\r\n            setError(false);\r\n            let copiaContacto = {...contacto};\r\n            // generando un nuevo atributo a la copiaContacto\r\n            copiaContacto.id = uuidv4()\r\n            agregarContacto(copiaContacto);\r\n            setContacto({\r\n                nombres: '',\r\n                apellidos: '',\r\n                fechaNac: '',\r\n                direccion: '',\r\n                telCasa: '',\r\n                telCelular: '',\r\n                observaciones: '',\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <form className=\"row\" onSubmit={enviarFormulario}>\r\n                {\r\n                    error ?\r\n                        <div className=\"col-12\">\r\n                            <div className=\"alert alert-danger col-12\" role=\"alert\">\r\n                                <strong>Error!</strong>todos los campos, deben estar debidamente llenados\r\n                            </div>\r\n                        </div> : null\r\n                }\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputNombre\">Nombres:</label>\r\n                    <input type=\"text\" id=\"inputNombre\" className=\"form-control\"\r\n                        name=\"nombres\" onChange={handleChange} value={contacto.nombres} />\r\n                </div>\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputApellidos\">Apellidos:</label>\r\n                    <input type=\"text\" id=\"inputApellidos\" className=\"form-control\"\r\n                        name=\"apellidos\" onChange={handleChange} value={contacto.apellidos} />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputFechaNac\">Fecha de Nacimiento:</label>\r\n                    <input type=\"date\" id=\"inputFechaNac\" className=\"form-control\"\r\n                        name=\"fechaNac\" onChange={handleChange} value={contacto.fechaNac} />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputDireccion\">Dirección:</label>\r\n                    <input type=\"text\" id=\"inputDireccion\" className=\"form-control\"\r\n                        name=\"direccion\" onChange={handleChange} value={contacto.direccion} />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputTelCasa\">Teléfono de Casa:</label>\r\n                    <input type=\"text\" id=\"inputTelCasa\" className=\"form-control\"\r\n                        name=\"telCasa\" onChange={handleChange} value={contacto.telCasa} />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputTelCelular\">Telefono Celular:</label>\r\n                    <input type=\"text\" id=\"inputTelCelular\" className=\"form-control\"\r\n                        name=\"telCelular\" onChange={handleChange} value={contacto.telCelular} />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-6\">\r\n                    <label htmlFor=\"inputObservaciones\">Observaciones:</label>\r\n                    <textarea cols=\"30\" rows=\"2\" id=\"inputObservaciones\" className=\"form-control\"\r\n                        name=\"observaciones\" onChange={handleChange} value={contacto.observaciones}></textarea>\r\n                </div>\r\n                <div className=\"form-group col-12\"><button type=\"submit\" className=\"btn btn-block btn-outline-primary\">Agregar Contacto</button></div>\r\n            </form>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\n\r\nconst Contacto = ({contacto, setContactoSelect}) => {\r\n    return (\r\n        <li className=\"list-group-item\" onClick={()=>{\r\n            setContactoSelect(contacto);\r\n        }}>\r\n        <img src=\"https://api.adorable.io/avatars/45/abott@adorable.png\" className=\"rounded-circle\" alt=\"\"/>\r\n        <span className=\"ml-5\">{contacto.nombres} {contacto.apellidos}</span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Contacto\r\n","import React from 'react'\r\nimport Contacto from './Contacto'\r\n\r\nconst Contactos = ({contactos, setContactoSelect}) => {\r\n// let lis = [];\r\n\r\n// contactos.forEach(c=>{\r\n// ListeningStateChangedEvent.push(<li className=\"list-group-item\">{c.nombres}</li>)\r\n// });\r\n\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {/* {list} */}\r\n            {\r\n                contactos.map(c => { \r\n                    return <Contacto contacto={c} setContactoSelect={setContactoSelect}/>\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Contactos\r\n","import React, { Fragment } from 'react'\r\n\r\nconst ContactoSeleccionado = ({ contactoSelect }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-header bg-dark\">\r\n                <h3 className=\"card-title text-center text-light\">Informacion de Contacto</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                {\r\n                    contactoSelect.nombres ? (\r\n                        <Fragment>\r\n                            <img src=\"https://api.adorable.io/avatars/64/abott@adorable.png\"\r\n                                alt=\"\" className=\"rounded-circle d-block m-auto\" />\r\n                            <p className=\"card-text\"><strong>Nombres: </strong>{contactoSelect.nombre}</p>\r\n                            <p className=\"card-text\"><strong>Apellidos: </strong>{contactoSelect.apellidos}</p>\r\n                            <p className=\"card-text\"><strong>Fecha de Nacimiento: </strong>{contactoSelect.fechaNac}</p>\r\n                            <p className=\"card-text\"><strong>Direccion: </strong>{contactoSelect.direccion}</p>\r\n                            <p className=\"card-text\"><strong>Numero de Casa: </strong>{contactoSelect.telCasa}</p>\r\n                            <p className=\"card-text\"><strong>Numero de Celular: </strong>{contactoSelect.telCelular}</p>\r\n                            <p className=\"card-text\"><strong>Observaciones: </strong>{contactoSelect.observaciones}</p>\r\n\r\n                        </Fragment>\r\n\r\n                    ) : <p className=\"card-text text-center\"> {\"=(\"} Noselecccionado.</p>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactoSeleccionado\r\n","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Contactos from './components/Contactos';\nimport ContactoSeleccionado from './components/ContactoSeleccionado';\n\n\nfunction App() {\n\n// traemos contactos del Local Storage\n  let contactosLS = JSON.parse(localStorage.getItem(\"contactos\"));\n  //si al traer los contactos del LS, no habia ninguno o\n  //que estaba indefinido\n  if (!contactosLS){\n    // crear un arreglo vacion para inicializar contactosLS\n    contactosLS = [];\n  }\n\nconst [contactos, setContactos] = useState(contactosLS);\nconst [contactoSelect, setContactoSelect] = useState({});\n\nconst agregarContacto = (objContacto) => {\n  let contactosAntiguos = [...contactos, objContacto];\n  localStorage.setItem(\"contactos\", JSON.stringify(contactosAntiguos));\n  setContactos(contactosAntiguos);\n\n //  setContactos([...contactos, objContacto]);   Nueva forma, directo\n}\n\n  return (\n    <Fragment>\n      <Header/>\n      <main className=\"container-fluid\">\n        <h1 className=\"display-3 text-center\">Agenda<span className=\"text-danger\">APP</span></h1>\n        <div className=\"row\">\n          <div className=\"col\">\n          <Formulario agregarContacto={agregarContacto}/>\n          </div>\n        </div>\n        <hr/>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            {/*Lista de contactos*/}\n            <Contactos contactos={contactos} setContactoSelect={setContactoSelect}/>\n          </div>\n          <div className=\"col-md-6\">\n            {/*contacto seleccionado*/}\n            <ContactoSeleccionado contactoSelect={contactoSelect}/>\n          </div>\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}